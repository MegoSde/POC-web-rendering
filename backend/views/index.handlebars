<h1>Welcome to the Rendering Demonstration Overview</h1>
<p>Explore various performance optimization concepts, rendering methods, and image formats implemented in this demonstration. Each concept is detailed below with instructions on how to test and compare them.</p>

<h2>Images</h2>
<ul>
    <li><strong><a href="/ssr?img=jpg">/ssr?img=jpg</a></strong>: Demonstrates server-side rendering (SSR) using JPG images. Compare image quality and size.</li>
    <li><strong><a href="/ssr?img=png">/ssr?img=png</a></strong>: SSR with PNG images, highlighting differences in size and quality compared to JPG and WebP.</li>
    <li><strong><a href="/ssr?img=webp">/ssr?img=webp</a></strong>: SSR with WebP images, showing a modern, optimized format for reduced file size and better performance.</li>
    <li><strong><a href="/ssr">/ssr</a></strong>: Default SSR setup using the most optimized settings (WebP images with compression and cashing).</li>
</ul>

<h2>Rendering Methods</h2>
<ul>
    <li><strong><a href="/ssrc">/ssrc</a></strong>: Demonstrates server-side rendering with compression. Observe reduced network payload size compared to uncompressed.</li>
    <li><strong><a href="/rcsc">/rcsc</a></strong>: Client-side rendering (CSR) with React and compression. Observe how the initial HTML contains minimal content and loads the menu dynamically.</li>
    <li><strong><a href="/rcs">/rcs</a></strong>: CSR without compression. Compare with `/rcsc` to see the impact of compression.</li>
    <li><strong><a href="/ssg">/ssg</a></strong>: Static site generation (SSG) with compression. This approach pre-renders pages and caches them for 15 minutes. Compare initial load speed and performance against SSR and CSR.</li>
</ul>

<h2>Lazy Loading</h2>
<ul>
    <li><strong><a href="/ssr?img=jpg&lazy=false">/ssr?img=jpg&lazy=false</a></strong>: SSR with lazy loading disabled. Observe all images eagerly loaded, resulting in higher initial network load.</li>
    <li><strong><a href="/ssr?img=jpg">/ssr?img=jpg</a></strong>: SSR with lazy loading enabled for mobile devices. Use Chrome’s device emulator to test.</li>
</ul>

<h2>Testing and Comparison</h2>
<p>Use the following tools to compare performance metrics:</p>
<ul>
    <li><strong>Network Load:</strong> Use Chrome DevTools (<kbd>F12</kbd>) to monitor the "Network" tab. Compare the total bytes downloaded for different endpoints.</li>
    <li><strong>Lighthouse Scores:</strong> Use Chrome’s Lighthouse tool (<kbd>F12</kbd> > Lighthouse tab) to analyze metrics like LCP (Largest Contentful Paint), TTI (Time to Interactive), and CLS (Cumulative Layout Shift). Observe differences when using lazy loading, compression, and image optimizations.</li>
</ul>

<p>Feel free to explore these endpoints and analyze how different optimizations affect web performance.</p>